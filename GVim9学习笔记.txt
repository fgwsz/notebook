使用vim可以大大节省自己在文字编辑工作中的时间
-------------------------------------------------------------------------------------------
规定一下按键的标注规范
<ctrl-c>意思是同时按下ctrl和c，组合键当作一个普通键处理
2d意思是依次按下2和d这两个普通键
:E[xplore]意思是:表示后面的命令是在命令模式下输入的，[]表示这里面的内容是可以不去输入的
输入:E和:Explore是一个效果
{number}d意思是{number}是一个数字，先输入一个数字然后按下d
-------------------------------------------------------------------------------------------
首先vim有这么几种模式。
vim一开始的界面就是普通模式

1.普通模式
在普通模式当中光标是一个方块。可以通过下面的操作来移动光标。
光标移动
h   光标向左移动一个字符
l   光标向右移动一个字符
j   光标向下移动一行
k   光标向上移动一行
gg  光标移动到文件头部的第一个非空白显示字符上
G   光标移动到文件尾部的第一个非空白显示字符上
w   光标移动到下一个单词的首字符
b   光标移动到上一个单词的首字符 
0   光标移动到行首的第一个字符上
$   光标移动到行尾的最后一个字符上
显示内容移动
zz          移动显示内容让光标所在行位于窗口最中间
<ctrl-e>    移动显示内容上移一行
<ctrl-y>    移动显示内容下移一行

选中内容操作
y   复制当前光标选中内容到剪贴板
yy  复制当前光标所在的一整行内容到剪贴板
{number}yy 复制当前光标所在行以及下面number-1行所有内容到剪切板中，其中number为数字字面量
p   粘贴剪切板内容到当前光标选中的字符之后(剪贴板内容不足一行)/下一行(剪贴板内容为多行)
    如果当前光标选中内容多于一个字符，那么直接替换
P   粘贴剪切板内容到当前光标选中的字符之前(剪贴板内容不足一行)/上一行(剪贴板内容为多行)
    如果当前光标选中内容多于一个字符，那么直接替换
d   剪切当前光标选中内容(选中内容必须多于一个字符)到剪切板中
dd  剪切当前光标所在行所有内容到剪切板中
{number}dd 剪切当前光标所在行以及下面number-1行所有内容到剪切板中，其中number为数字字面量
u   撤销上一个操作
<ctrl-r> 取消撤销，恢复到原来
.   执行上一个操作
x   删除当前光标所在的一个字符
o   在光标所在行的下面插入一个空行，并进入输入模式，光标移动到新行的行首
o   在光标所在行的上面插入一个空行，并进入输入模式，光标移动到新行的行首

可视模式：
<ctrl-v> 进入列选模式
列选模式下，使用以下方式来选中内容。
h   光标选中内容向左拓展/取消选中一个字符宽度
l   光标选中内容向右拓展/取消选中一个字符宽度
j   光标选中内容向下选中/取消选中(当前光标选中内容宽度)的字符
k   光标选中内容向上选中/取消选中(当前光标选中内容宽度)的字符
使用以下方式来进入列选模式的编辑模式。
I   在当前光标选中内容的前面,进入列选编辑模式
A   在当前光标选中内容的后面,进入列选编辑模式
使用以下方式来退出列选模式的编辑模式。
<esc> 退出列选编辑，回到普通模式

V   进入行选模式
行选模式下，使用以下方式来选中内容。
h   光标选中内容向左拓展/取消选中一个字符宽度
l   光标选中内容向右拓展/取消选中一个字符宽度
j   光标选中内容向下选中/取消选中一整行
k   光标选中内容向上选中/取消选中一整行
<esc> 退出行选模式，回到普通模式

v   进入自由选择模式
自由选择模式下可以使用以下方式来选中内容。
h   光标选中内容向左拓展/取消选中一个字符宽度
l   光标选中内容向右拓展/取消选中一个字符宽度
j   光标选中内容向下选中/取消选中一整行中(当前光标选中内容的最后一行的宽度)的字符
k   光标选中内容向上选中/取消选中一整行中(当前光标选中内容的第一行的宽度)的字符
<esc> 退出自由选择模式，回到普通模式

2.命令行模式 
普通模式进入命令行模式使用 : 开始输入命令
常用命令：
w   保存文件当前更改，即写入
q   退出文件编辑，执行后在vscode中会直接关闭当前的文件标签页
wq  写入并退出文件编辑
执行一条命令，执行之后，回到普通模式：<enter>
esc 退出命令行模式，回到普通模式
↑ 选中命令行中上一条输入的历史命令，按<enter>执行
↓ 选中命令行中下一条输入的历史命令，按<enter>执行
<ctrl-f>  打开命名行输入历史缓存窗口
    该窗口里的文本内容可复制
    <CR> 这里<CR>即<enter>,在选中行按回车会直接执行那一行的命令
    :q   退出命名行输入历史缓存窗口并退出命令行模式

3.输入模式 
和普通模式不同，在输入模式中光标是一条竖线。
普通模式进入输入模式使用以下几种方式，它们的区别就是进入输入模式后光标放置的位置不同。
i   光标放置在当前字符之前
a   光标放置在当前字符之后
I   光标放置在本行所有字符之前
A   光标放置在本行所有字符之后
<esc> 退出输入模式，回到普通模式

4.查找和替换
    替换命令的格式一般如下：
    :[range]s/{pattern}/{string}/[flags] [count]
    该命令表示在[range]的每一行中搜索{pattern}，并将其替换为{string}。 
    [count]是一个乘以命令的正整数。
    如果没有给出[range]和[count]，则仅替换当前行中找到的模式。
    例如，要搜索当前行中字符串“foo”的首次出现，并将其替换为“bar”，可以使用：
        :s/foo/bar/
    要替换当前行中搜索到的所有内容，可以添加g标志：
        :s/foo/bar/g
    如果想搜索和替换整个文件中的匹配内容，使用百分比字符%作为范围。
    此字符指示从文件第一行到最后一行的范围：
        :%s/foo/bar/g
    如果省略{string}部分即上面的bar，则将其视为空字符串，相当于将匹配到的内容替换为空，
    既删除匹配到的内容。
    以下命令删除当前行中字符串“foo”的所有实例：
        :s/foo//g
    当然，除了作为分隔符外，还可以使用任何其他非字母数字单字节字符，而不是斜杠字符（/）。例如：
        :s|foo|bar|
    要确认每个替换，可以使用c标志。
        :s/foo/bar/gc
    替换前会询问：replace with bar (y/n/a/q/l/^E/^Y)?
    按y替换匹配项，或按l替换匹配项并退出。按n跳过当前匹配，按q或Esc退出替换
    a选项替换匹配项和所有剩余匹配项。
    若要向下滚动屏幕，请使用<ctrl-y>，向上滚动，请使用<ctrl-e>。
    还可以使用正则表达式作为搜索模式，例如：
        :%s/^foo.*/Vim is the best/gc
    ^ 符号表示与行首匹配，.* 表示匹配任意数量的字符。
    区分大小写
    默认情况下，搜索操作区分大小写；搜索“FOO”将与“FOo”不匹配。
    要忽略搜索模式的案例，请使用i标志：
        :s/Foo/bar/gi
    另一种强制忽略案例的方法是在搜索模式后添加\c。例如，/Linux\c执行忽略大小写搜索。
        :s/Foo\c/bar/g
    查询范围
    当未指定范围时，替换命令仅在当前行中操作。
    范围可以是一行，也可以是两行之间的范围。 行说明符之间可用英文,分隔;字符分割。 
    可以使用绝对行号或特殊符号指定范围。
    例如，要在从第3行到第10行的所有行中将所有出现的“ foo”替换为“ bar”，可以使用：
        :3,10s/foo/bar/g
    该范围是包含范围的，这意味着该范围包括第一行和最后一行。
    . 字符表示当前行，
    $美元符号表示最后一行。 
    要在从当前行到最后一行的所有行中替换“ foo”：
        :.,$s/foo/bar/
    也可以使用“ +”或“-”符号来设置行说明符，其后是从前一个行号添加或减去的数字。 
    如果省略符号后的数字，则默认为1。
    例如，从当前行和接下来的四行开始，用“ bar”替换每个“ foo”，键入：
        :.,+4s/foo/bar/g
    替换整个单词
    替代命令将模式作为字符串而不是整个单词查找。 例如，如果您正在搜索“ gnu”，
    则搜索查找匹配“ gnu”嵌入在较大单词（例如“cygnus” 或 “magnum”）中的情况。
    要搜索整个单词，请键入\ <标记单词的开头，输入搜索模式，键入>标记单词的结尾：
    例如，要搜索单词“ foo”，可以使用\<foo\>：
        :s/\<foo\>/bar/
    替代历史
    Vim会跟踪您在当前会话中运行的所有命令。
    要浏览历史记录以查找先前的替代命令，请输入:s并使用向上或向下箭头键查找先前的替代操作
    要运行该命令，只需按<enter>，您也可以在执行操作之前编辑命令
    例子
    注释行（在行前添加＃）从5到20：
        :5,20s/^/#/
    取消注释行从5到20，恢复以前的更改：
        :5,20s/^#//
    将“苹果”，“橙色”和“芒果”的所有实例替换为“水果”：
        :%s/apple\|orange\|mango/fruit/g
    删除每行末尾的空格：
        :%s/\s\+$//e
    上面的用法复杂了，我们只是选用其中的一部分功能。
1） 选中一部分文本，然后替换
    我们可以将这个功能配合可视模式（选择模式）来使用，
    进入了可视模式之后，选择相应的光标区间，然后输入 : 可以直接进入命令模式，
    然后再输入
    s/要替换的字符串/替换成的内容/g
        模糊匹配
    s/\<要替换的单词\>/替换成的内容/g
        全字匹配，不包含单词嵌入其他单词的情况,其中\<和\>表示转义字符 < 和 > 
    然后点击回车，就替换成功了。
2） 选中一部分文本，然后删除
    进入可视模式选中要适用的文本，然后按 : 进入命令模式，
    然后再输入
    s/要替换的字符串//g
        模糊匹配
    s/\<要替换的单词\>//g
        全字匹配，不包含单词嵌入其他单词的情况,其中\<和\>表示转义字符 < 和 > 
3） :[range]s/{pattern}/{string}/[flags] [count]
    [range]特殊值
    range 可以表示为{begin},{finish}的区间形式
    % 表示整个文件
    0 表示文件首部
    $ 表示文件尾部
    . 表示当前行
    {number} 表示第{number}行
    +{number} 表示下面的{number}行
    -{number} 表示上面的{number}行
    {pattern}/{string}特殊值
    ^ 表示行首
    $ 表示行尾
4)  一个实用小技巧
    :<xxx,yyy>s/;/\r{\r\r}/g
    \r代表换行，注意换行符是\r而不是\n
    此命令的作用：把函数声明末尾的分号变成大括号
    举例：替换前
    extern void func(void);
    替换后
    extern void func(void)
    {
    
    }

5. 不保存文件，强制退出编辑
    命名模式下 :q! 不保存修改，强制退出文本编辑模式。

6. 全选
    首先按 gg 来到文件头部，然后按 v 进入可视模式，然后按 G$ 移动光标到文件尾部，
    就实现了整个文本文件内容的全部选中。
    总结起来就是 ggvG$ 

7. 复制当前行到下一行中
    首先就是按 V 进入行选模式，然后按 y 复制选中的当前行，然后按 p 粘贴剪切板内容到下一行。
    总结起来就是 Vyp 
    当然也可以使用 yyp 

8. 缩进(普通模式下)
   >> 光标所在行向右缩进一个层级
   << 光标所在行向左取消缩进一个层级
   >  选中多行向右缩进一个层级
   <  选中多行向左取消缩进一个层级

9. 翻页(普通模式下)
   <ctrl-f> 显示下一页
   <ctrl-b> 显示上一页

10.编码格式(命令模式下)
    :set enc[oding]=编码
        将当前文件用指定的编码格式打开
    :set f[ile]enc[oding]=编码
        转换当前文件到指定的编码格式

11.查找(命令模式下)
    /要查找的内容
        从普通模式直接进入命令模式，模糊匹配
    /\<要查找的内容\>
        从普通模式直接进入命令模式，全字匹配
    :/要查找的内容
        模糊匹配
    :/\<要查找的内容\>
        全字匹配
    ?要查找的内容
        从普通模式直接进入命令模式，模糊匹配
    ?\<要查找的内容\>
        从普通模式直接进入命令模式，全字匹配
    :?要查找的内容
        模糊匹配
    :?\<要查找的内容\>
        全字匹配
    在命令模式输入上述其中一个指令后，输入enter进入普通模式，
    之后可以在普通模式下使用n(跳转到下一个)/N(跳转到上一个)进行查找对象的首字母光标跳转

12.分屏

    创建分屏窗口
    :vs[plit] [{file path}]
        []中的表示可选项，不写也可以，此时{file path}默认为当前文件
        新建一个左侧的分屏窗口，新的分屏窗口显示内容为{file path}，并将光标移入
    :sp[lit] [{file path}]
        []中的表示可选项，不写也可以，此时{file path}默认为当前文件
        新建一个上方的分屏窗口，新的分屏窗口显示内容为{file path}，并将光标移入

    关闭分屏窗口
    :q
        关闭光标所在的分屏窗口
    :qall
        关闭所有窗口
    :qall!
        强制关闭所有窗口
    :wall
        保存所有窗口更改
    :wqall
        保存所有窗口更改并退出所有窗口
    :only
        关闭光标所在的分屏以外的全部窗口
    <ctrl-w>c
        关闭光标所在的分屏窗口
    <ctrl-w>q
        关闭光标所在的分屏窗口
    <ctrl-w>o
        关闭光标所在的分屏以外的全部窗口

    切换光标所在的分屏窗口
    <ctrl-w>w 光标切换到下一个分屏窗口
    <ctrl-w>h 光标切换到左边的分屏窗口
    <ctrl-w>j 光标切换到下边的分屏窗口
    <ctrl-w>k 光标切换到上边的分屏窗口
    <ctrl-w>l 光标切换到右边的分屏窗口

    移动光标所在的分屏窗口
    <ctrl-w>H 光标所在的分屏窗口移动到左边
    <ctrl-w>J 光标所在的分屏窗口移动到下边
    <ctrl-w>K 光标所在的分屏窗口移动到上边
    <ctrl-w>L 光标所在的分屏窗口移动到右边

13.vim自带文件浏览器(Netrw)操作
    :E[xplore] [{file path}]
        []中的表示可选项，不写也可以
        {file path}默认为当前路径
        在当前窗口中打开文件浏览器，根目录为file path
    :Sex[plore] [{file path}]
        []中的表示可选项，不写也可以
        {file path}默认为当前路径
        新建一个上方的分屏窗口，在新窗口中打开文件浏览器，根目录为{file path}
    :Vex[plore] [{file path}]
        []中的表示可选项，不写也可以
        {file path}默认为当前路径
        新建一个左侧的分屏窗口，在新窗口中打开文件浏览器，根目录为{file path}
    -
        返回上一级目录
    i
        更改文件树显示方式
        紧凑型(文件名紧凑在一起，用空格隔开)
        详细型(按照列显示文件名、大小、时间)
        列紧凑型(按照列显示文件名)
        树型(按enter可展开目录树)
    s
        排序(升序)
        s 切换排序方式(名称 大小 时间 拓展)
    r
        排序为升序时切换为降序/排序为降序时切换为升序
    j
        光标切换到上面一项
    k
        光标切换到下面一项
    enter
        进入光标所在目录/打开光标所在文件(在当前窗口显示)
    %
        新建文件,并用vim打开
    d
        新建文件夹
    qf
        命令模式框显示光标所在目录/文件的信息
        文件名 文件大小 最后写入时间
    R
        重命名光标所在目录/文件
    D
        删除光标所在目录/文件
    v
        创建一个左边的分屏窗口，
        进入光标所在目录/打开光标所在文件(在新建的分屏窗口显示)
        光标移动到新键的分屏窗口
    o
        创建一个上边的分屏窗口，
        进入光标所在目录/打开光标所在文件(在新建的分屏窗口显示)
        光标移动到新键的分屏窗口
    p
        光标所选为文件时：(预览)
        创建一个下边的分屏窗口，
        打开光标所在文件(在新建的分屏窗口显示)
        光标所选为目录时：显示警告信息
    x
        光标所选为文件时：用关联程序打开光标所在文件(不推荐，可能有bug)
        (例如调用word打开.doc)
        光标所选为目录时：进入该目录
    X
        光标所选为可执行文件时：用system运行光标所在文件(不推荐，可能有bug)
        光标所选为目录/非执行文件是：显示警告/行为未定义
    :q
        退出文件浏览器并关闭光标所属窗口

14.分屏显示终端(命令模式下)
    :set shell=powershell
        默认的终端是cmd，可以设置为powershell，永久修改请将该语句加入vimrc文件
    :term[inal]
        []内部内容可以不写
        创建一个上方的分屏窗口用来显示终端，并将光标移入
        仍然可以使用ctrl+w等快捷键在不同分屏窗口切换光标
    关闭终端分屏窗口:可以使用终端自带的退出命令
        例如可以使用`exit`命令来退出cmd/powershell
    :rightbelow term[inal]
        可以在右下方打开一个终端窗口
    :bo[tright] term[inal]
        可以在下方打开一个终端窗口
    注意：vim :term 打开的终端窗口也可以使用vim的三种编辑模式，但有些地方不同。
    <ctrl-\><ctrl-n> 
        终端窗口下从插入模式进入普通模式(一般模式)。
        其他的操作和vim自带的模式变换一致。

15.标签页多文件
    :tabnew [{file path}]
        []中的表示可选项，不写也可以，此时{file path} 默认为新的空白文件
        新建一个标签页，新的标签页窗口显示内容为{file path}，并将光标移入
    :tabc[lose]
        []中的表示可选项，不写也可以
        关闭当前标签页
    :tabn[ext]
        切换到下一个标签页
    :tabp[rev]
        切换到上一个标签页
    :tabn[ext] {number}
        切换到第number个标签页
    :tabp[rev] {number}
        切换到第number个标签页
    gt
        []中的表示可选项，不写也可以，此时number为1
        切换到上一个标签页
    gT
        []中的表示可选项，不写也可以，此时number为1
        切换到上一个标签页
    {number}gt
        切换到第number个标签页
    {number}gT
        切换到第number个标签页
    :tabo[nly]
        []中的表示可选项，不写也可以
        仅保留这一个标签页，关闭其他所有标签页
    :tabs
        查看所有打开的标签页信息

16.命令模式下运行shell命令
    :!{shell 语句}
        使用终端(可在vimrc中配置)运行{shell 语句}

17.vim {dir path}
    打开Netrw文件浏览器窗口，根目录为{dir path}

18. 自动补全
    在插入模式下编辑文字的时候按下面两个键中的其中一个可以弹出自动补全选项窗口
    <ctrl-n> 打开自动补全选项窗口，并切换到第一个待选项
    <ctrl-p> 打开自动补全选项窗口，并切换到最后一个待选项
    自动补全选项窗口打开时
        ↑ 切换到上一个待选项
        ↓ 切换到下一个待选项
        <enter> 选中待选项并退出选项窗口
        <esc> 选中待选项并退出选项窗口(不推荐，语义不明确)
        ↑ 移动到选项窗口第一个待选项的上方一行，什么也不选择，直接退出选项窗口
        ↓ 移动到选项窗口最后一个待选项的下方一行，什么也不选择，直接退出选项窗口
    <ctrl-x><ctrl-f> 自动补全文件名

19.vimgrep搜索和跳转
    vimgrep是直接在command模式中使用的
    它可以查找当前目录下文件中包含关键词的行
    默认自动跳转到第一个符合目标的位置
    :vim[grep][!] /{pattern}/[g][j][f] {path} ...
    :vim[grep][!] {pattern} {path} ...
        vim可作为vimgrep的缩写
        !可紧随vimgrep之后，表示强制执行该命令
        索引的关键字pattern放在了两个/中间，并且支持正则表达式
        g,j,f可选
            vimgrep搜索的时候会把匹配到(1个或多个)搜索结果的那一行在QuickFix-List窗口中只添加一次
            如果添加g，会把每个搜索结果所在的行都添加一次(不管是不是有搜索结果在同一行)
            vimgrep搜索完成之后默认自动跳转到第一个搜索结果
                (在当前缓冲区窗口打开，可能不是当前正在打开的文件)
            如果添加j，将不会自动跳转到第一个搜索结果
            如果添加f，将使用模糊字符串匹配来查找匹配的行
                在这种情况下，{pattern}被视为文字字符串而不是正则表达式
        {path} ...表示多个正则文件名/目录名，也可以是多个确定的文件名/目录名
            可以在path中使用的一些特殊的通配符:
                %
                    表示匹配当前光标所在的缓冲区的文件路径
                *
                    表示匹配当前工作目录下的所有文件路径(不包括文件夹)
                    (可以使用:pwd查看当前工作目录)
                **
                    表示匹配当前工作目录和其子目录(递归子目录)下的所有文件路径
                *.xxx
                    表示匹配后缀名为xxx的全部文件路径
            举例:
                **/*.hpp **/*.cpp
                    表示匹配当前目录下(递归子目录)所有后缀名为.hpp和.cpp的文件
        使用
            :vimgrep /std/g **/*.hpp **/*.cpp
                查找当前目录下所有hpp、cpp文件中包含std字符串的文件
                并跳转到第一个匹配的位置
                同时所有搜索结果会显示在QuickFix-List窗口中
    :cope[n],:cw
        打开QuickFix-List窗口
        在QuickFix-List窗口显示vimgrep命令的搜索结果
            ↑ 切换到上一个搜索结果
            ↓ 切换到下一个搜索结果
            <enter> 选中该搜索结果，并在主窗口打开
    :ccl[ose]
        关闭QuickFix-List窗口
    :cn[ext]
        跳转到下一个搜索结果
    :cp[revious]
        跳转到上一个搜索结果
    :cl[ist]
        使用more显示QuickFix-List窗口内容
    lvimgrep
        lvimgrep与vimgrep搜索命令基本一样
        不同点在于搜索结果不是显示在QuickFix-List中而是显示在Location-List中
    QuickFix-List vs Location-List
        QuickFix-List是全局的
        相对于窗口而言，不同的窗口共用一个QuickFix-List窗口
        而Location-List是局部于某个特定窗口的
        即不同窗口的Location-List可以不同
    :lop[en],:lw
        打开Location-List窗口
        在Location-List窗口显示vimgrep命令的搜索结果
            ↑ 切换到上一个搜索结果
            ↓ 切换到下一个搜索结果
            <enter> 选中该搜索结果，并在主窗口打开
    :lcl[ose]
        关闭Location-List窗口

20.在命令行中粘贴文本
    在命令行模式中输入文字的时候按<ctrl-r>然后输入寄存器名称
    (vim中寄存器名称一般都是一个字符)
    然后回车即可粘贴。
    1.无名unnamed寄存器
        " 缓存最后一次操作内容
    2.数字numbered寄存器
        0~9 缓存最近操作内容，复制与删除有别,
        0 寄存器缓存最近一次复制的内容，1~9 缓存最近9次删除内容
    3.行内删除small delete寄存器
        - 缓存行内删除内容
    4.具名named寄存器
        a~z或A~Z 指定时可用，一般是q录制的宏
    5.只读read-only寄存器
        : . % # 分别缓存最近命令、最近插入文本、当前文件名、当前交替文件名
    6.表达式expression寄存器
        = 只读，用于执行表达式命令
    7.选择及拖拽selection and drop寄存器
        * + ~ 存取GUI选择文本，可用于与外部应用交互，
        使用前提为系统剪切板clipboard可用
    8.黑洞black hole寄存器
        _ 不缓存操作内容干净删除
    9.模式寄存器last search pattern
        / 缓存最近的搜索模式
    查看寄存器中的内容
        :reg[isters] 查看寄存器中的内容
    清空寄存器中的内容
        :let @{register name}="" 清空{register name}寄存器中的内容
    结论：
    最常用的是第7个
    如果在vimrc中设置了系统剪贴板和vim寄存器互通的情况下，
    * + ~ 寄存器缓存着最后一次复制的内容
    (可以是系统剪切板中最后一次复制的内容，也可以是在vim中最后一次复制的内容)
    <ctrl-r>* 在命名行鼠标当前位置粘贴最后一次复制的内容(和系统剪切板互通)

21.一些常用的命令
    下面命令中的'<,'>表示当前选中区域。
    :'<,'>s/\n//g    删除当前选中区域内所有的换行符
    :'<,'>g/^\s*$/d  删除当前选中区域内所有的空行(也包括只含空白字符的空行)
        g 是vim全局命令，用法和s类似，g/range/action
        d 表示删除
        ^ 表示行首
        $ 表示行尾
        \s表示空格
        * 是正则表达式通配符，表示0个或多个

22.一些兼容性的疑难杂症
    1.vim内置终端功能异常
    环境：
        操作系统：Windows 11
        系统终端：Windows PowerShell(已在$profile配置PSReadLine命令行补全)
        powershell版本：5.1.22621.2428
        vim版本：VIM-Vi IMproved 9.0(2022 Jun 28,编译于Jun 28 2022 12:30:17)
        vim内置终端：vimrc中配置vim内置终端为powershell
    场景：
    1) 在Windows PowerShell中使用vim/gvim命令打开vim/gvim，然后在vim/gvim中调出vim内置终端，
        vim内置终端加载$profile PSReadLine配置成功，
        vim内置终端命令行补全功能正常，
        vim内置终端可以使用<ctrl-v>粘贴。
    2) 直接在vim/gvim调出vim内置终端，
        vim内置终端加载$profile PSReadLine配置失败，
        vim内置终端命令行补全功能无法使用，
        vim内置终端无法使用<ctrl-v>粘贴。

23.行内查找字符并移动光标位置（普通/normal模式下）
    f{char} 在当前行中正序查找指定字符{char}，
            将光标移动到光标之后的第一个找到的指定字符{char}的位置，
            若未找到，则不移动光标
    F{char} 在当前行中逆序查找指定字符{char}，
            将光标移动到光标之前的第一个找到的指定字符{char}的位置，
            若未找到，则不移动光标
    t{char} 在当前行中正序查找指定字符{char}，
            将光标移动到光标之后的第一个找到的指定字符{char}的前一个字符的位置，
            若未找到，则不移动光标
    T{char} 在当前行中逆序查找指定字符{char}，
            将光标移动到光标之前的第一个找到的指定字符{char}的后一个字符的位置，
            若未找到，则不移动光标

24.录制/执行宏（普通/normal模式下）
说明：在Vim中录制宏，可以按照以下步骤进行操作：
    普通/normal模式下，按下"q"键，后面紧跟一个字母，用于指定宏的名称。
        例如：将宏录制到"a"键，可以按下"qa"。
    此时开始进行宏的录制。
    然后执行你要录制的操作，比如删除、插入、移动光标等等。
    每一步操作都会被记录下来，可以实时看到它们被重复录制的过程。
    按下"q"键退出录制模式，完成录制。
    现在，你可以按下"@a"（或者"@字母"，如果你用其他字母进行录制）来重复执行刚刚录制的宏。
    vim会把录下的宏存储到对应的寄存器中
        例如：qa会将宏存储到a寄存器中，可以使用:reg查看所有的寄存器中的内容
    如果你想多次重复执行宏，你可以使用以下命令：
        "n@a"：重复执行宏n次。
        "1,100@a"：在行1到100之间重复执行宏。
总结：录制/执行宏（普通/normal模式下）
    q{char}         开始录制名为名为{char}的宏
    q               结束录制
    @{char}         执行名为{char}的宏操作1次
    {number}@{char} 执行名为{char}的宏操作{number}次
    :let @{char}="" 删除名为{char}的宏操作
        其中{char}的取值范围是[0-9a-zA-z]，并且a-z和A-Z对应的字母是同一个宏名

25.更改工作目录（命令模式下）
    :cd {path}  更改全局工作目录为{path}
    :lcd {path} 更改当前窗口的工作目录为{path}

26.跳转到使用过的文件编辑位置（普通/normal模式下）
    ctrl-o        跳转到上一个文件编辑位置
    ctrl-i        跳转到下一个文件编辑位置
    <Tab>         跳转到下一个文件编辑位置
    :ju[mps]      查看文件编辑位置列表
    :cle[arjumps] 清空文件编辑位置列表

27.替换模式(Replace Replace-mode mode-replace)
    普通模式下输入"R"命令进入替换模式。
    替换模式下，输入的每个字符会删除行内的一个字符。如果没有字符可以删了(在行
尾)，则附加输入的字符(此时和插入模式一样)。这样，直到到达行尾前，行内的字符数
保持不变。如果输入的是<NL>，插入换行符，但不会删除任何字符。
    要小心<Tab>字符。如果在其上输入一个正常的可显示字符，字符数仍然一样，但是
列数看起来少了。
    如果你在替换模式下删除字符(用<BS>、CTRL-W或CTRL-U)，实际发生的事是你删除了
改变。被替换的字符被复原了。如果你的输入超过已有的部分，新增的字符会被删除。实
际上，这可以看作是一次一个字符的撤销。
    如果打开了'expandtab'选项，<Tab>会用多个空格替换一个字符。结果是行内的字符
数会增加。退格键只能一次删一个空格。只有一个空格(最后一个)上的退格才能得回原
来的字符。

28.虚拟替换模式(vreplace-mode Virtual-Replace-mode)
    {仅当编译时加入+vreplace特性才会有效}
    在普通模式里输入"gR"命令进入虚拟替换模式。
    虚拟替换模式和替换模式类似，但不是替换文件里的实际字符，而是替换屏幕的领地
。这样，文件里的字符看起来不会移动。
    所以，如果你输入了<Tab>，它会替换多个普通的字符，而如果你在<Tab>上输入字
母，它可能什么都没有代替，因为<Tab>还是会占据相同的位置。
    输入<NL>还是不会导致文件后面的字符看起来移动过。当前行的后面部分被<NL>
所替换(也就是，它们被删除了)，而替换继续在下一行进行。不会插入新行，除非
你到达文件尾部之后。
    输入CTRL-T和CTRL-D会看到有趣的效果。光标前面的字符跟平常一样向一边移动，但
是光标后面的字符保持不动。CTRL-T会隐藏被移动字符遮盖的部分旧行，而CTRL-D会
重新让它们显现出来。
    和替换模式一样，使用<BS>等会恢复被替换的字符。即使和'smartindent'、CTRL-T
和CTRL-D、'expandtab'、'smarttab'、'softtabstop'等一起使用的效果也是如此。
    在'list'模式下，虚拟替换模式的行为和不在'list'模式下一样，除非'cpoptions'
里设置了"L"。
    注意:在此模式下，光标之后的字符看起来在移动的情况仅有列表模式'list'，置位
'wrap'时偶尔也会出现(当行改变了长度，使得比屏幕宽度更窄或者更宽时)。其他情况
下空格会被插入，以防止之后的字符移动。
    该模式对编辑<Tab>分隔表格列的时候很有用，因为输入新的数据时同时还能保持所
有的列对齐。

29.帮助文档
    :h[elp] [xxx]
        用只读模式在当前缓冲区的上方打开一个子窗口
        xxx可选
            xxx若不存在，则会打开vim内置的help.txt
            xxx若存在，则会打开vim内置的关于xxx的详细描述

30.终端中调用vim执行vim内置操作
```bash
vim -c {vim-command-1} -c{vim-command-2} ... {file-path}
```
    在一个vim终端命令中，你可以使用多达10个"-c"参数
    它们按照输入的先后顺序执行
    如果{vim-command}包含空格，则必须使用双引号将其括起来
举例
```bash
vim -c "%s/hello/foo/g" -c "wq!" hello.cpp
```
在vim中打开hello.cpp文件时执行替换操作然后保存并退出

