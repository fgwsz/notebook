使用vim可以大大节省自己在文字编辑工作中的时间
声明`按键内容`不需要按下`键，使用``只是为了强调
首先vim有这么几种模式。
vim一开始的界面就是普通模式

1.普通模式
在普通模式当中光标是一个方块。可以通过下面的操作来移动光标。
光标移动
`h`  光标向左移动一个字符
`l`  光标向右移动一个字符
`j`  光标向下移动一行
`k`  光标向上移动一行
`gg` 光标移动到文件头部的第一个字符上
`G`  光标移动到文件尾部的最后一个字符上
`w`  光标移动到下一个单词的首字符
`b`  光标移动到上一个单词的首字符 
`0`  光标移动到行首的第一个字符上
`$`  光标移动到行尾的最后一个字符上

选中内容操作
`y`  复制当前光标选中内容到剪贴板
`yy` 复制当前光标所在的一整行内容到剪贴板
`number yy` 复制当前光标所在行以及下面number - 1行所有内容到剪切板中，其中number为数字字面量
`p`  粘贴剪切板内容到当前光标选中的字符之后(剪贴板内容不足一行)/下一行(剪贴板内容为多行)
     如果当前光标选中内容多于一个字符，那么直接替换
`P`  粘贴剪切板内容到当前光标选中的字符之前(剪贴板内容不足一行)/上一行(剪贴板内容为多行)
     如果当前光标选中内容多于一个字符，那么直接替换
`d`  剪切当前光标选中内容(选中内容必须多于一个字符)到剪切板中
`dd` 剪切当前光标所在行所有内容到剪切板中
`number dd` 剪切当前光标所在行以及下面number - 1行所有内容到剪切板中，其中number为数字字面量
`u`  撤销上一个操作
`ctrl+r` 取消撤销，恢复到原来
`.`  执行上一个操作
`x`  删除当前光标所在的一个字符
`o` 在光标所在行的下面插入一个空行，并进入输入模式，光标移动到新行的行首
`o` 在光标所在行的上面插入一个空行，并进入输入模式，光标移动到新行的行首

可视模式：
`ctrl v` 进入列选模式
列选模式下，使用以下方式来选中内容。
`h` 光标选中内容向左拓展/取消选中一个字符宽度
`l` 光标选中内容向右拓展/取消选中一个字符宽度
`j` 光标选中内容向下选中/取消选中(当前光标选中内容宽度)的字符
`k` 光标选中内容向上选中/取消选中(当前光标选中内容宽度)的字符
使用以下方式来进入列选模式的编辑模式。
`I` 在当前光标选中内容的前面,进入列选编辑模式
`A` 在当前光标选中内容的后面,进入列选编辑模式
使用以下方式来退出列选模式的编辑模式。
`esc` 退出列选编辑，回到普通模式

`V`      进入行选模式
行选模式下，使用以下方式来选中内容。
`h`  光标选中内容向左拓展/取消选中一个字符宽度
`l`  光标选中内容向右拓展/取消选中一个字符宽度
`j`  光标选中内容向下选中/取消选中一整行
`k`  光标选中内容向上选中/取消选中一整行
`esc` 退出行选模式，回到普通模式

`v`     进入自由选择模式
自由选择模式下可以使用以下方式来选中内容。
`h`  光标选中内容向左拓展/取消选中一个字符宽度
`l`  光标选中内容向右拓展/取消选中一个字符宽度
`j`  光标选中内容向下选中/取消选中一整行中(当前光标选中内容的最后一行的宽度)的字符
`k`  光标选中内容向上选中/取消选中一整行中(当前光标选中内容的第一行的宽度)的字符
`esc` 退出自由选择模式，回到普通模式

2.命令行模式 
普通模式进入命令行模式使用 `:` 开始输入命令
常用命令：
`w`  保存文件当前更改，即写入
`q`  退出文件编辑，执行后在vscode中会直接关闭当前的文件标签页
`wq` 写入并退出文件编辑
执行一条命令，执行之后，回到普通模式：`enter`
`esc` 退出命令行模式，回到普通模式

3.输入模式 
和普通模式不同，在输入模式中光标是一条竖线。
普通模式进入输入模式使用以下几种方式，它们的区别就是进入输入模式后光标放置的位置不同。
`i` 光标放置在当前字符之前
`a` 光标放置在当前字符之后
`I` 光标放置在本行所有字符之前
`A` 光标放置在本行所有字符之后
`esc` 退出输入模式，回到普通模式
 
 4.查找和替换
  注意：这里的查找和替换是在命令模式下进行的。
  基础的查找和替换
  首先，启动Vim/Vi编辑器，处于正常模式下。如果你不确定是否处于正常模式下，这时你可以按“ESC”，
  编辑器就会进入正常模式。
  替换命令的格式一般如下：
  :[range]s/{pattern}/{string}/[flags] [count]
  该命令表示在[range]的每一行中搜索{pattern}，并将其替换为{string}。 
  [count]是一个乘以命令的正整数。
  如果没有给出[range]和[count]，则仅替换当前行中找到的模式。
  例如，要搜索当前行中字符串“foo”的首次出现，并将其替换为“bar”，可以使用：
  :s/foo/bar/
  要替换当前行中搜索到的所有内容，可以添加g标志：
  :s/foo/bar/g
  如果想搜索和替换整个文件中的匹配内容，使用百分比字符%作为范围。
  此字符指示从文件第一行到最后一行的范围：
  :%s/foo/bar/g
  如果省略{string}部分即上面的bar，则将其视为空字符串，相当于将匹配到的内容替换为空，
  既删除匹配到的内容。
  以下命令删除当前行中字符串“foo”的所有实例：
  :s/foo//g
  当然，除了作为分隔符外，还可以使用任何其他非字母数字单字节字符，而不是斜杠字符（/）。例如：
  :s|foo|bar|
  要确认每个替换，可以使用c标志。
  :s/foo/bar/gc
  替换前会询问：
  replace with bar (y/n/a/q/l/^E/^Y)?
  按y替换匹配项，或按l替换匹配项并退出。 按n跳过当前匹配，按q或Esc退出替换。 
  a选项替换匹配项和所有剩余匹配项。
  若要向下滚动屏幕，请使用CTRL + Y，向上滚动，请使用CTRL + E。
  还可以使用正则表达式作为搜索模式，例如：
  :%s/^foo.*/Vim is the best/gc
  
  ^ 符号表示与行首匹配，.* 表示匹配任意数量的字符。
  
  区分大小写
  默认情况下，搜索操作区分大小写；搜索“FOO”将与“FOo”不匹配。
  要忽略搜索模式的案例，请使用i标志：
  :s/Foo/bar/gi
  另一种强制忽略案例的方法是在搜索模式后添加\c。例如，/Linux\c执行忽略大小写搜索。
  :s/Foo\c/bar/g
  查询范围
  当未指定范围时，替换命令仅在当前行中操作。
  范围可以是一行，也可以是两行之间的范围。 行说明符之间可用英文,分隔;字符分割。 
  可以使用绝对行号或特殊符号指定范围。
  例如，要在从第3行到第10行的所有行中将所有出现的“ foo”替换为“ bar”，可以使用：
  :3,10s/foo/bar/g
  该范围是包含范围的，这意味着该范围包括第一行和最后一行。
  
  . 字符表示当前行，
  $美元符号表示最后一行。 
  要在从当前行到最后一行的所有行中替换“ foo”：
  :.,$s/foo/bar/
  
  也可以使用“ +”或“-”符号来设置行说明符，其后是从前一个行号添加或减去的数字。 
  如果省略符号后的数字，则默认为1。
  例如，从当前行和接下来的四行开始，用“ bar”替换每个“ foo”，键入：
  :.,+4s/foo/bar/g
  
  替换整个单词
  替代命令将模式作为字符串而不是整个单词查找。 例如，如果您正在搜索“ gnu”，
  则搜索查找匹配“ gnu”嵌入在较大单词（例如“cygnus” 或 “magnum”）中的情况。
  要搜索整个单词，请键入\ <标记单词的开头，输入搜索模式，键入>标记单词的结尾：
  例如，要搜索单词“ foo”，可以使用\<foo\>：
  :s/\<foo\>/bar/
  替代历史
  Vim会跟踪您在当前会话中运行的所有命令。
  要浏览历史记录以查找先前的替代命令，请输入:s并使用向上或向下箭头键查找先前的替代操作。 
  要运行该命令，只需按Enter。 您也可以在执行操作之前编辑命令。
  例子
  
  注释行（在行前添加＃）从5到20：
  :5,20s/^/#/
  
  取消注释行从5到20，恢复以前的更改：
  :5,20s/^#//
  
  将“苹果”，“橙色”和“芒果”的所有实例替换为“水果”：
  :%s/apple\|orange\|mango/fruit/g
  删除每行末尾的空格：
  :%s/\s\+$//e
  
  上面的用法复杂了，我们只是选用其中的一部分功能。
1） 选中一部分文本，然后替换
    我们可以将这个功能配合可视模式（选择模式）来使用，
    进入了可视模式之后，选择相应的光标区间，让后输入`:`可以直接进入命令模式，
    然后再输入
    `s/要替换的字符串/替换成的内容/g`    // 字符串匹配
    `s/\<要替换的单词\>/替换成的内容/g`  // 单词匹配，不包含单词嵌入其他单词的情况,其中\<和\>表示转义字符`<`和`>`
    然后点击回车，就替换成功了。
2） 选中一部分文本，然后查找
    进入可视模式选中要适用的文本，然后按`:`进入命令模式，
    然后再输入
    `s/要替换的字符串`    // 字符串匹配
    `s/\<要替换的单词\>`  // 单词匹配，不包含单词嵌入其他单词的情况,其中\<和\>表示转义字符`<`和`>`
    然后点击回车，就会发现匹配的内容变成了其他的颜色。
3） 选中一部分文本，然后删除
    进入可视模式选中要适用的文本，然后按`:`进入命令模式，
    然后再输入
    `s/要替换的字符串//g`    // 字符串匹配
    `s/\<要替换的单词\>//g`  // 单词匹配，不包含单词嵌入其他单词的情况,其中\<和\>表示转义字符`<`和`>`
    然后点击回车，就删除成功了。
    
4） 在:[range]s/[old_string]/[new_string]/[mode]中，
    可以用几个特殊值来表示[range]，
    例如: 
    `:^,$s/hello` 从整个文档中查找hello 
    `:.,&s/hello` 从当前行到行尾查找hello
    ^ 表示文件首部
    $ 表示文件尾部
    . 表示当前行(从行首开始，包含整行）

5. 不保存文件，强制退出编辑
  命名模式下`:q!` 不保存修改，强制退出文本编辑模式。

6. 全选
  首先按`gg`来到文件头部，然后按`v`进入可视模式，然后按`G`移动光标到文件尾部，
  就实现了整个文本文件内容的全部选中。
  总结起来就是`ggvG`

7. 复制当前行到下一行中
  首先就是按`V`进入行选模式，然后按`y`复制选中的当前行，然后按`p`粘贴剪切板内容到下一行。
  总结起来就是`Vyp`
  当然也可以使用`yyp`

-------------------------------------------------------------------------------------------
题外话
自此规定一下按键的标注规范
<ctrl-c>意思是同时按下ctrl和c，组合键当作一个普通键处理
2d意思是依次按下2和d这两个普通键
:E[xplore]意思是:表示后面的命令是在命令模式下输入的，[]表示这里面的内容是可以不去输入的
输入:E和:Explore是一个效果
{number}d意思是{number}是一个数字，先输入一个数字然后按下d
-------------------------------------------------------------------------------------------

8. 缩进(普通模式下)
   >> 光标所在行向右缩进一个层级
   << 光标所在行向左取消缩进一个层级
   >  选中多行向右缩进一个层级
   <  选中多行向左取消缩进一个层级

9. 翻页(普通模式下)
   <ctrl-f> 显示下一页
   <ctrl-b> 显示上一页

10.编码格式(命令模式下)
    :set enc=编码
        将当前文件用指定的编码格式打开
    :set fenc=编码
        转换当前文件到指定的编码格式

11.查找(命令模式下)
    :/要查找的内容 
        模糊匹配
    :/\<要查找的内容\> 
        全字匹配
    在命令模式输入上述其中一个指令后，输入enter进入普通模式，
    之后可以在普通模式下使用n(跳转到下一个)/N(跳转到上一个)进行查找对象的首字母光标跳转

12.分屏
    创建分屏窗口(命令模式下)
    :vs [{file path}]
        []中的表示可选项，不写也可以，此时{file path}默认为当前文件
        新建一个左侧的分屏窗口，新的分屏窗口显示内容为{file path}，并将光标移入
    :sp [{file path}]
        []中的表示可选项，不写也可以，此时{file path}默认为当前文件
        新建一个上方的分屏窗口，新的分屏窗口显示内容为{file path}，并将光标移入
    :q
        退出光标所属分屏窗口
    :qall
        关闭所有窗口
    :qall!
        强制关闭所有窗口
    :wall
        保存所有窗口更改
    :wqall
        保存所有窗口更改并退出所有窗口

    切换光标所在的分屏窗口(普通模式下)
    <ctrl-w>w 光标切换到下一个分屏窗口
    <ctrl-w>h 光标切换到左边的分屏窗口
    <ctrl-w>j 光标切换到下边的分屏窗口
    <ctrl-w>k 光标切换到上边的分屏窗口
    <ctrl-w>l 光标切换到右边的分屏窗口

    移动光标所在的分屏窗口(普通模式下)
    <ctrl-w>H 光标所在的分屏窗口移动到左边
    <ctrl-w>J 光标所在的分屏窗口移动到下边
    <ctrl-w>K 光标所在的分屏窗口移动到上边
    <ctrl-w>L 光标所在的分屏窗口移动到右边

13.vim自带文件浏览器(Netrw)操作
    :E[xplore] [{file path}]
        []中的表示可选项，不写也可以
        {file path}默认为当前路径
        在当前窗口中打开文件浏览器，根目录为file path
    :Sex[plore] [{file path}]
        []中的表示可选项，不写也可以
        {file path}默认为当前路径
        新建一个上方的分屏窗口，在新窗口中打开文件浏览器，根目录为{file path}
    :Vex[plore] [{file path}]
        []中的表示可选项，不写也可以
        {file path}默认为当前路径
        新建一个左侧的分屏窗口，在新窗口中打开文件浏览器，根目录为{file path}
    -
        返回上一级目录
    i
        更改文件树显示方式
        紧凑型(文件名紧凑在一起，用空格隔开)
        详细型(按照列显示文件名、大小、时间)
        列紧凑型(按照列显示文件名)
        树型(按enter可展开目录树)
    s
        排序(升序)
        s 切换排序方式(名称 大小 时间 拓展)
    r
        排序为升序时切换为降序/排序为降序时切换为升序
    j
        光标切换到上面一项
    k
        光标切换到下面一项
    enter
        进入光标所在目录/打开光标所在文件(在当前窗口显示)
    %
        新建文件,并用vim打开
    d
        新建文件夹
    qf
        命令模式框显示光标所在目录/文件的信息
        文件名 文件大小 最后写入时间
    R
        重命名光标所在目录/文件
    D
        删除光标所在目录/文件
    v
        创建一个左边的分屏窗口，
        进入光标所在目录/打开光标所在文件(在新建的分屏窗口显示)
        光标移动到新键的分屏窗口
    o
        创建一个上边的分屏窗口，
        进入光标所在目录/打开光标所在文件(在新建的分屏窗口显示)
        光标移动到新键的分屏窗口
    p
        光标所选为文件时：(预览)
        创建一个下边的分屏窗口，
        打开光标所在文件(在新建的分屏窗口显示)
        光标所选为目录时：显示警告信息
    x
        光标所选为文件时：用关联程序打开光标所在文件(不推荐，可能有bug)
        (例如调用word打开.doc)
        光标所选为目录时：进入该目录
    X
        光标所选为可执行文件时：用system运行光标所在文件(不推荐，可能有bug)
        光标所选为目录/非执行文件是：显示警告/行为未定义
    :q
        退出文件浏览器并关闭光标所属窗口

14.分屏显示终端(命令模式下)
    :set shell=powershell
        默认的终端是cmd，可以设置为powershell，永久修改请将该语句加入vimrc文件
    :term[inal]
        []内部内容可以不写
        创建一个上方的分屏窗口用来显示终端，并将光标移入
        仍然可以使用ctrl+w等快捷键在不同分屏窗口切换光标
    关闭终端分屏窗口:可以使用终端自带的退出命令
        例如可以使用`exit`命令来退出cmd/powershell

15.标签页多文件
    :tabnew [{file path}]
        []中的表示可选项，不写也可以，此时{file path} 默认为新的空白文件
        新建一个标签页，新的标签页窗口显示内容为{file path}，并将光标移入
    :tabc[lose]
        []中的表示可选项，不写也可以
        关闭当前标签页
    :tabn[ext]
        切换到下一个标签页
    :tabp[rev]
        切换到上一个标签页
    :tabn[ext] {number}
        切换到第number个标签页
    :tabp[rev] {number}
        切换到第number个标签页
    gt
        []中的表示可选项，不写也可以，此时number为1
        切换到上一个标签页
    gT
        []中的表示可选项，不写也可以，此时number为1
        切换到上一个标签页
    {number}gt
        切换到第number个标签页
    {number}gT
        切换到第number个标签页
    :tabo[nly]
        []中的表示可选项，不写也可以
        仅保留这一个标签页，关闭其他所有标签页
    :tabs
        查看所有打开的标签页信息

16.命令模式下运行shell命令
    :!{shell 语句}
        使用终端(可在vimrc中配置)运行{shell 语句}

17.vim {dir path}
    打开Netrw文件浏览器窗口，根目录为{dir path}
